<?php
/**
 * @file
 * Code for the Feature Config Base feature.
 */

include_once 'feature_config_base.features.inc';

/*******************************************************************************
 * COMMON VIEW MODES
 ******************************************************************************/

/**
 * Implements hook_entity_info_alter().
 */
function feature_config_base_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['list'] = array(
    'label' => t('List'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['home'] = array(
    'label' => t('Home'),
    'custom settings' => TRUE,
  );
}

/*******************************************************************************
 * EMPTY FRONT PAGE
 ******************************************************************************/

/**
 * Implements hook_menu().
 */
function feature_config_base_menu() {
  $items = array();

  $items['frontpage'] = array(
    'page callback' => '_feature_config_base_menu_frontpage',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Page 'frontpage' callback.
 */
function _feature_config_base_menu_frontpage() {
  drupal_set_title('');
  return '';
}

/*******************************************************************************
 * CUT DS TITLE FIELD
 ******************************************************************************/

/**
 * Implements hook_ds_fields_info_alter().
 */
function feature_config_base_ds_fields_info_alter(&$fields, $entity_type) {
  if ($entity_type == 'node') {
    if (empty($fields['title']['properties']['formatters'])) {
      $fields['title']['properties']['formatters'] = array();
      $fields['title']['properties']['formatters']['default'] = t('Default');
    }
    $fields['title']['properties']['formatters']['feature_config_base_ds_cut_title'] = t('Cut title');

    $fields['title']['properties']['settings']['length'] = array(
      'type' => 'textfield',
      'description' => 'Max length. 0 for unlimited.'
    );
    $fields['title']['properties']['default']['length'] = 0;

    $fields['title']['properties']['old_function'] = $fields['title']['function'];
    $fields['title']['function'] = 'feature_config_base_ds_render_title';
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function feature_config_base_field_formatter_settings_summary_alter(&$summary, $context) {
  if ($context['formatter'] == 'feature_config_base_ds_cut_title') {
    if (!empty($context['field']['formatter_settings']['length'])) {
      $summary = str_replace('Length: ' . t('Yes') . '<br />', 'Length: ' . $context['field']['formatter_settings']['length'] . '<br />', $summary);
    }
  }
  else {
    $summary = preg_replace('#Length: (.*?)<br />#', '', $summary);
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function feature_config_base_field_formatter_settings_form_alter(&$form, $context) {
  if ($context['formatter'] == 'feature_config_base_ds_cut_title') {
    $form['length']['#type'] = 'textfield';
  }
  else {
    $form['length']['#type'] = 'hidden';
  }
}

function feature_config_base_ds_render_title($field) {
  if (!empty($field['formatter_settings']['length'])) {
    $length = $field['formatter_settings']['length'] - 3;
    // Clone original field to avoid side effects
    $tmp = $field;
    $tmp['entity'] = clone $field['entity'];
    // Alter title before sending to the render function
    if (strlen($tmp['entity']->title) > $length) {
      $tmp['entity']->full_title = $tmp['entity']->title;
      $tmp['entity']->title = substr($tmp['entity']->title, 0, $length) . '...';
    }
    $result = ds_render_field($tmp);
    if (!empty($tmp['entity']->full_title)) {
      $result = str_replace('<a', '<a title="' . $tmp['entity']->full_title . '"', $result);
    }
  }
  else {
    $result = ds_render_field($field);
  }
  return $result;
}

/*******************************************************************************
 * FORMATTERS
 ******************************************************************************/

/**
 * Implements hook_field_formatter_info().
 */
function feature_config_base_field_formatter_info() {
  return array(
    'text_plain_trimmed' => array(
      'label' => t('Trimmed plain text'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array(
        'trim_length' => 600,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function feature_config_base_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  $render = array();

  foreach ($items as $delta => $item) {
    $output = _text_sanitize($instance, $langcode, $item, 'value');
    $output = filter_xss($output, array());
    $output = substr($output, 0, $settings['trim_length']);
    $render[$delta] = array(
      '#markup' => '<p>' . $output . '</p>',
    );
  }

  return $render;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function feature_config_base_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $elements = array();

  $elements['trim_length'] = array(
    '#title' => t('Length'), 
    '#type' => 'textfield', 
    '#size' => 20, 
    '#default_value' => $settings['trim_length'], 
    '#element_validate' => array('element_validate_integer_positive'), 
    '#required' => TRUE,
  );

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function feature_config_base_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($settings['trim_length'] > 0) {
    return t('Trim length') . ': ' . $settings['trim_length'];
  }
}
